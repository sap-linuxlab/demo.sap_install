---
# Create Credential type for additional azure credentials
- name: Ensure Ansible Controller credential type for Azure ExtraVars exist
  awx.awx.credential_type:
    name: Azure Extra Variables
    description: Credential to use for SSH keypair for Ansible Controller
    kind: cloud
    inputs:
      fields:
        - id: azure_location
          type: string
          label: Azure Location
          secret: false
        - id: instance_flavor
          type: string
          label: Cloud Instance Flavor
          secret: false
        - id: controller_enable_provider_azure
          type: boolean
          label: Deploy controller on azure
        - id: azure_resource_group
          type: string
          label: Azure Resource Group Name
          secret: false
        - id: azure_private_network
          type: string
          label: Azure Private Network Name
          secret: false
        - id: azure_ssh_public_key
          type: string
          multiline: true
          label: "Azure Public SSH Key"
          secret: true
      required:
        - azure_location
        - instance_flavor
        - controller_enable_provider_azure
        - azure_resource_group
        - azure_ssh_public_key
    injectors:
      extra_vars:
        azure_location: "{{ '{{ azure_location  }}' }}"
        instance_flavor: "{{ '{{ instance_flavor  }}' }}"
        controller_enable_provider_azure: "{{ '{{ controller_enable_provider_azure  }}' }}"
        azure_resource_group: "{{ '{{ azure_resource_group  }}' }}"
        azure_private_network: "{{ '{{ azure_private_network  }}' }}"
        azure_ssh_public_key: "{{ '{{ azure_ssh_public_key }}' }}"
    state: present

# Tasks to create a temporary AZURE credentials
- name: Create Azure Credential in Ansible Controller "{{ guid }}"
  awx.awx.credential:
    name: "{{ guid }} Cloud Credential"
    description: "Azure Cloud Credential for Demo {{ guid }}"
    organization: "{{ demo_org }}"
    credential_type: "Microsoft Azure Resource Manager"
    inputs:
      subscription: "{{ azure_subscription }}"
      client: "{{ azure_cli_id }}"
      secret: "{{ azure_cli_secret }}"
      tenant: "{{ azure_tenant }}"

- name: Create Azure Extra Variables credential
  awx.awx.credential:
    name: "{{ guid }} Cloud Extra Variables"
    description: "Azure Extra Variable for Demo {{ guid }} "
    credential_type: Azure Extra Variables
    organization: "{{ demo_org }}"
    inputs:
      azure_location: "{{ azure_location  }}"
      instance_flavor: "{{ instance_flavor  }}"
      controller_enable_provider_azure: true
      azure_resource_group: "{{ azure_resource_group  }}"
      azure_private_network: "{{ azure_private_network | default(azure_resource_group+'_net') }}"
      azure_ssh_public_key: "{{ controller_ansible_public_key }}"

# TODO: add hostfilter ".*-{{ guid }}"
- name: Ensure dynamic Azure inventory source exists
  awx.awx.inventory_source:
    name: "Ansible Demo Hosts"
    description: "finds hosts deployed for this demo and group properly"
    inventory: "{{ item }}"
    overwrite: true
    update_on_launch: false
    organization: "{{ demo_org }}"
    state: present
    credential: "{{ guid }} Cloud Credential"
    source: azure_rm
    source_vars:
      fail_on_template_errors: false
      hostvar_expressions:
        computer_name: name
        private_ip: private_ipv4_addresses[0] if private_ipv4_addresses else None
        provisioning_state: provisioning_state | title
        public_ip: public_ipv4_addresses[0] if public_ipv4_addresses else None
        public_ip_id: public_ip_id if public_ip_id is defined else None
        public_ip_name: public_ip_name if public_ip_name is defined else None
        tags: tags if tags else None
        type: resource_type
      keyed_groups:
        - key: tags.AnsibleGroup
          prefix: ''
          separator: ''
      plain_host_names: true
  loop:
    - "Ansible SSA Demo Setup"
    - "{{ guid }} Ansible SSA Demo"
  register: register_inventory_sources

- name: print variable register_inventory_sources
  ansible.builtin.debug:
    var: register_inventory_sources
